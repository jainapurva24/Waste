#include <stdio.h> #include <stdlib.h> #include <string.h> #define MAX_SIZE 100
struct Stack {
char items[MAX_SIZE]; int top;
};
void initialize(struct Stack* stack) { stack->top = -1;
}
int isEmpty(struct Stack* stack) { return stack->top == -1;
}
void push(struct Stack* stack, char item) { stack->items[++stack->top] = item;
}
char pop(struct Stack* stack) { if (!isEmpty(stack)) { return stack->items[stack->top--];
}

return '\0'; // Null character represents an empty stack
}
char peek(struct Stack* stack) { if (!isEmpty(stack)) {
return stack->items[stack->top];
}
return '\0'; // Null character represents an empty stack
}
int isOperator(char c) {
return (c == '+' || c == '-' || c == '*' || c == '/');
}
int getPrecedence(char c) { if (c == '+' || c == '-') return 1;
if (c == '*' || c == '/') return 2; return 0;
}
void infixToPostfix(const char* infix, char* postfix) { struct Stack operatorStack; initialize(&operatorStack); int postfixIndex = 0;
for (int i = 0; infix[i]; i++) { char currentChar = infix[i];
if (isalnum(currentChar)) { postfix[postfixIndex++] = currentChar;
} else if (currentChar == '(') { push(&operatorStack, currentChar);
} else if (currentChar == ')') {
while (!isEmpty(&operatorStack) && peek(&operatorStack) != '(') { postfix[postfixIndex++] = pop(&operatorStack);
}
if (!isEmpty(&operatorStack) && peek(&operatorStack) != '(') { printf("Invalid expression\n"); return;
} else {
pop(&operatorStack); // Pop the opening parenthesis
}
} else if (isOperator(currentChar)) {

while (!isEmpty(&operatorStack) && getPrecedence(currentChar) <= getPrecedence(peek(&operatorStack))) { postfix[postfixIndex++] = pop(&operatorStack);
}
push(&operatorStack, currentChar);
}
}
while (!isEmpty(&operatorStack)) {
char topOperator = pop(&operatorStack); if (topOperator == '(') { printf("Invalid expression\n"); return;
}
postfix[postfixIndex++] = topOperator;
}
postfix[postfixIndex] = '\0';
}


int main() {
char infix[MAX_SIZE]; char postfix[MAX_SIZE];
printf("Enter an infix expression: "); fgets(infix, sizeof(infix), stdin); infixToPostfix(infix, postfix);
printf("Postfix Expression: %s\n", postfix); return 0;
}
